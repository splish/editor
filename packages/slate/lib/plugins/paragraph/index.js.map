{"version":3,"sources":["../../../src/plugins/paragraph/index.js"],"names":["P","ParagraphPlugin","name","nodes","deserialize","el","next","tagName","toLowerCase","kind","type","childNodes","serialize","object","children","textAlign","data","get"],"mappings":";;;;;;;AAwBA;;;;AACA;;;;AACA;;;;;;;;;;;;+eA1BA;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AAKO,IAAMA,gBAAI,qBAAV;;IAEcC,e;;;;;;;;;;;;;;wMACnBC,I,GAAO,W,QAEPC,K,uBAAWH,C,yBAEXI,W,GAAc,UAACC,EAAD,EAAUC,IAAV,EAAwB;AACpC,cAAQD,GAAGE,OAAH,CAAWC,WAAX,EAAR;AACE,aAAK,GAAL;AACE,iBAAO;AACLC,kBAAM,OADD;AAELC,kBAAMV,CAFD;AAGLG,mBAAOG,KAAKD,GAAGM,UAAR;AACP;AAJK,WAAP;AAFJ;AASD,K,QAEDC,S,GAAY,UACVC,MADU,EAEVC,QAFU,EAGP;AACH,UAAID,OAAOJ,IAAP,KAAgB,OAApB,EAA6B;AAC3B;AACD;AACD,cAAQI,OAAOH,IAAf;AACE,aAAKV,CAAL;AACE,iBAAO;AAAA;AAAA,cAAG,OAAO,EAAEe,WAAWF,OAAOG,IAAP,CAAYC,GAAZ,CAAgB,OAAhB,CAAb,EAAV;AAAoDH;AAApD,WAAP;AAFJ;AAID,K;;;;;;kBA5BkBb,e","file":"index.js","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *  \n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *  \n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\n// @flow\n/* eslint-disable prefer-reflect, default-case, react/display-name */\nimport React from 'react'\nimport Plugin from '../Plugin'\nimport Paragraph from './node'\n\nexport const P = 'PARAGRAPH/PARAGRAPH'\n\nexport default class ParagraphPlugin extends Plugin {\n  name = 'paragraph'\n\n  nodes = { [P]: Paragraph }\n\n  deserialize = (el: any, next: any) => {\n    switch (el.tagName.toLowerCase()) {\n      case 'p':\n        return {\n          kind: 'block',\n          type: P,\n          nodes: next(el.childNodes)\n          // data: Data.create({ textAlign: el.attr('styles')['text-align'] })\n        }\n    }\n  }\n\n  serialize = (\n    object: { type: string, kind: string, data: any },\n    children: any[]\n  ) => {\n    if (object.kind !== 'block') {\n      return\n    }\n    switch (object.type) {\n      case P:\n        return <p style={{ textAlign: object.data.get('align') }}>{children}</p>\n    }\n  }\n}\n"]}