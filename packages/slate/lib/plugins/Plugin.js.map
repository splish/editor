{"version":3,"sources":["../../src/plugins/Plugin.js"],"names":["Plugin","nodes","marks","plugins","onKeyDown","e","data","state","hoverButtons","toolbarButtons"],"mappings":";;;;;;AAwBA;;;;;;0JAxBA;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AAGA;;;IAGqBA,M;;;OASnBC,K,GAA+C,E;OAK/CC,K,GAA+C,E;OAK/CC,O,GAAoB,E;;OAuBpBC,S,GAAY,UACVC,CADU,EAEVC,IAFU,EAGVC,KAHU;AAAA,WAID,IAJC;AAAA,G;;OASZC,Y,GAAqC,E;OAKrCC,c,GAAuC,E;;AAvDvC;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;AAQA;;;;;AAKA;;;;;;;;;;AAcA;;;;;AAKA;;;;;kBArDmBT,M","file":"Plugin.js","sourcesContent":["/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *  \n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *  \n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\n// @flow\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react'\n\n/**\n * @class this is the base class for slate plugins\n */\nexport default class Plugin {\n  /**\n   * @member a unique identifier of the plugin\n   */\n  name: string\n\n  /**\n  * @member the nodes to be added to the schema\n  */\n  nodes: { [key: string]: Component<*, *, *> } = {}\n\n  /**\n   * @member the marks to be added to the schema\n   */\n  marks: { [key: string]: Component<*, *, *> } = {}\n\n  /**\n   * @member the slate plugins added to the editor\n   */\n  plugins: Array<*> = []\n\n  /**\n   * @member serialize a plugin's state to html\n   */\n  serialize: (\n    object: { kind: string, type: string, data: any },\n    children: any[]\n  ) => any\n\n  /**\n   * @member serialize a plugin's state from html\n   */\n  deserialize: () => any\n\n  /**\n   * This handler is called when any key is pressed\n   *\n   * @param e the keydown event\n   * @param data utilities for hotkey logic\n   * @param state the current editor state\n   * @returns the new editor state if the plugin handles the hotkey\n   */\n  onKeyDown = (\n    e: Event,\n    data: { key: string, isMod: boolean, isShift: boolean },\n    state: any\n  ): ?any => null\n\n  /**\n   * @member the buttons to be added to the hover menu\n   */\n  hoverButtons: Component<*, *, *>[] = []\n\n  /**\n   * @member the buttons to be added to the global toolbar\n   */\n  toolbarButtons: Component<*, *, *>[] = []\n}\n"]}